# Frontend-Backend Integration Demonstration Guide
# This script helps demonstrate how your frontend connects to the backend API

Write-Output "======================================================="
Write-Output "üéØ FRONTEND-BACKEND INTEGRATION DEMONSTRATION"
Write-Output "======================================================="
Write-Output ""

$baseUrl = "https://internship-api.gentleforest-68343e46.centralindia.azurecontainerapps.io"

Write-Output "üìã DEMONSTRATION OVERVIEW"
Write-Output "========================="
Write-Output ""
Write-Output "This demonstration shows how your frontend HTML pages"
Write-Output "communicate with your Node.js backend API through:"
Write-Output ""
Write-Output "‚úÖ RESTful API calls"
Write-Output "‚úÖ JSON data exchange"
Write-Output "‚úÖ File uploads (resume handling)"
Write-Output "‚úÖ Real-time data fetching"
Write-Output "‚úÖ Error handling"
Write-Output ""

Write-Output "üåê APPLICATION ARCHITECTURE"
Write-Output "============================="
Write-Output ""
Write-Output "Frontend (HTML/JS) ‚Üê‚Üí Backend API (Node.js) ‚Üê‚Üí SQL Database"
Write-Output ""
Write-Output "Frontend Files:"
Write-Output "‚Ä¢ index.html      - Landing page"
Write-Output "‚Ä¢ student.html    - Student management (ADD/VIEW students)"
Write-Output "‚Ä¢ admin.html      - Admin interface"
Write-Output "‚Ä¢ faculty.html    - Faculty interface"
Write-Output ""
Write-Output "Backend API Endpoints:"
Write-Output "‚Ä¢ GET  /api/students     - Fetch all students"
Write-Output "‚Ä¢ POST /api/students     - Add new student"
Write-Output "‚Ä¢ GET  /api/internships  - Fetch internships"
Write-Output "‚Ä¢ POST /api/internships  - Add internship"
Write-Output ""

Write-Output "üîÑ STEP 1: Testing Backend API Directly"
Write-Output "========================================="
Write-Output ""
Write-Output "First, let's verify the backend API is working:"
Write-Output ""

try {
    Write-Output "Testing: GET $baseUrl/api/students"
    $studentsResponse = Invoke-WebRequest -Uri "$baseUrl/api/students" -UseBasicParsing -TimeoutSec 10
    Write-Output "‚úÖ Status: HTTP $($studentsResponse.StatusCode)"
    Write-Output "‚úÖ Response Length: $($studentsResponse.Content.Length) bytes"
    
    # Parse JSON to show data structure
    $studentsData = $studentsResponse.Content | ConvertFrom-Json
    $studentCount = if ($studentsData -is [array]) { $studentsData.Count } else { 1 }
    Write-Output "‚úÖ Students Found: $studentCount records"
    Write-Output ""
    
    if ($studentCount -gt 0) {
        Write-Output "Sample Student Data Structure:"
        $sampleStudent = if ($studentsData -is [array]) { $studentsData[0] } else { $studentsData }
        Write-Output ($sampleStudent | ConvertTo-Json -Depth 2)
    }
} catch {
    Write-Output "‚ùå API Error: $($_.Exception.Message)"
}

Write-Output ""
Write-Output "üñ•Ô∏è  STEP 2: Frontend-Backend Integration Points"
Write-Output "================================================"
Write-Output ""

Write-Output "The frontend JavaScript makes these API calls:"
Write-Output ""
Write-Output "1. LOADING STUDENTS (student.html line ~28):"
Write-Output "   JavaScript Code:"
Write-Output "   ```javascript"
Write-Output "   async function loadStudents() {"
Write-Output "     const res = await fetch('/api/students');"
Write-Output "     const students = await res.json();"
Write-Output "     // Display students in HTML list"
Write-Output "   }"
Write-Output "   ```"
Write-Output ""

Write-Output "2. ADDING STUDENTS (student.html line ~40-80):"
Write-Output "   JavaScript Code:"
Write-Output "   ```javascript"
Write-Output "   const res = await fetch('/api/students', {"
Write-Output "     method: 'POST',"
Write-Output "     headers: { 'Content-Type': 'application/json' },"
Write-Output "     body: JSON.stringify(studentData)"
Write-Output "   });"
Write-Output "   ```"
Write-Output ""

Write-Output "üé¨ STEP 3: Live Demonstration Instructions"
Write-Output "==========================================="
Write-Output ""
Write-Output "TO SHOW YOUR MENTOR:"
Write-Output ""
Write-Output "1. Open the live application URL:"
Write-Output "   $baseUrl"
Write-Output ""
Write-Output "2. Navigate to student.html by adding /student.html to URL:"
Write-Output "   $baseUrl/student.html"
Write-Output ""
Write-Output "3. Show the Student List Loading:"
Write-Output "   ‚Ä¢ Point out that the list appears automatically"
Write-Output "   ‚Ä¢ Explain: 'This data comes from our SQL database via API'"
Write-Output "   ‚Ä¢ Open browser Developer Tools (F12) ‚Üí Network tab"
Write-Output "   ‚Ä¢ Refresh page to show the API call to /api/students"
Write-Output ""
Write-Output "4. Demonstrate Adding a New Student:"
Write-Output "   ‚Ä¢ Fill in the form (Roll Number, Name, Email)"
Write-Output "   ‚Ä¢ Upload a sample resume file"
Write-Output "   ‚Ä¢ Click 'Add Student'"
Write-Output "   ‚Ä¢ Show the API call in Network tab (POST /api/students)"
Write-Output "   ‚Ä¢ Point out the student appears in the list immediately"
Write-Output ""

Write-Output "üîç STEP 4: Technical Deep Dive"
Write-Output "==============================="
Write-Output ""
Write-Output "EXPLAIN TO YOUR MENTOR:"
Write-Output ""
Write-Output "A. Data Flow:"
Write-Output "   Frontend Form ‚Üí JavaScript ‚Üí JSON ‚Üí API ‚Üí Database ‚Üí JSON ‚Üí Frontend"
Write-Output ""
Write-Output "B. Error Handling:"
Write-Output "   ‚Ä¢ Try-catch blocks in JavaScript"
Write-Output "   ‚Ä¢ HTTP status code checking"
Write-Output "   ‚Ä¢ User-friendly error messages"
Write-Output ""
Write-Output "C. File Upload Process:"
Write-Output "   ‚Ä¢ Frontend converts file to Base64"
Write-Output "   ‚Ä¢ Sends to API via JSON"
Write-Output "   ‚Ä¢ Backend stores in Azure Blob Storage"
Write-Output "   ‚Ä¢ Returns URL for frontend to display"
Write-Output ""

Write-Output "üõ†Ô∏è  STEP 5: Backend Code Walkthrough"
Write-Output "======================================"
Write-Output ""
Write-Output "Show your mentor the backend code:"
Write-Output ""
Write-Output "File: internship-api/index.js"
Write-Output ""
Write-Output "Key Integration Points:"
Write-Output "‚Ä¢ Line ~1-20:   Dependencies (Express, CORS, SQL)"
Write-Output "‚Ä¢ Line ~200+:   API Routes (/api/students, /api/internships)"
Write-Output "‚Ä¢ Line ~300+:   Database connection and queries"
Write-Output "‚Ä¢ Line ~500+:   File upload handling"
Write-Output ""

Write-Output "üéØ STEP 6: Browser Developer Tools Demo"
Write-Output "========================================"
Write-Output ""
Write-Output "SHOW YOUR MENTOR IN BROWSER (F12):"
Write-Output ""
Write-Output "1. Network Tab:"
Write-Output "   ‚Ä¢ See all API calls being made"
Write-Output "   ‚Ä¢ View request/response data"
Write-Output "   ‚Ä¢ Check HTTP status codes"
Write-Output ""
Write-Output "2. Console Tab:"
Write-Output "   ‚Ä¢ View JavaScript logs"
Write-Output "   ‚Ä¢ See any errors"
Write-Output "   ‚Ä¢ Check API responses"
Write-Output ""
Write-Output "3. Application Tab:"
Write-Output "   ‚Ä¢ LocalStorage/SessionStorage usage"
Write-Output "   ‚Ä¢ Cookies if authentication is used"
Write-Output ""

Write-Output "üìä STEP 7: Database Integration Proof"
Write-Output "====================================="
Write-Output ""
Write-Output "To prove data persistence:"
Write-Output ""
Write-Output "1. Add a student through the frontend"
Write-Output "2. Close the browser completely"
Write-Output "3. Reopen and navigate to student.html"
Write-Output "4. Show the student is still there"
Write-Output "5. Explain: 'Data is stored in Azure SQL Database'"
Write-Output ""

Write-Output "üéâ INTEGRATION DEMONSTRATION COMPLETE!"
Write-Output "======================================="
Write-Output ""
Write-Output "KEY POINTS TO EMPHASIZE:"
Write-Output ""
Write-Output "‚úÖ Frontend and Backend are completely separated"
Write-Output "‚úÖ Communication happens through RESTful APIs"
Write-Output "‚úÖ Data persists in cloud database"
Write-Output "‚úÖ Real-time updates without page refresh"
Write-Output "‚úÖ Proper error handling throughout"
Write-Output "‚úÖ File uploads work end-to-end"
Write-Output "‚úÖ Responsive and user-friendly interface"
Write-Output ""
Write-Output "TECHNICAL STACK DEMONSTRATED:"
Write-Output "‚Ä¢ Frontend: HTML5, CSS3, Vanilla JavaScript"
Write-Output "‚Ä¢ Backend: Node.js, Express.js"
Write-Output "‚Ä¢ Database: Azure SQL Database"
Write-Output "‚Ä¢ Storage: Azure Blob Storage"
Write-Output "‚Ä¢ Hosting: Azure Container Apps"
Write-Output ""
Write-Output "üöÄ Your full-stack application is working perfectly!"