trigger:
- main

pool:
  name: Default
  demands:
    - agent.name -equals SelfHostedAgent
    - Agent.OS -equals Windows_NT

variables:
- group: secrets

steps:
- checkout: self
  displayName: 'Checkout code'

# Optional: Debug environment variables
- powershell: |
    Write-Output "=== DEBUG: Available Variables ==="
    Get-ChildItem Env: | Sort-Object Name | ForEach-Object { Write-Output ("$($_.Name)=$($_.Value)") }
  displayName: 'Debug Environment Variables'

# Optional: Deploy frontend to Azure Static Web Apps (uncomment if you want CI/CD)
# - task: AzureStaticWebApp@0
#   inputs:
#     app_location: 'frontend'
#     api_location: ''
#     output_location: ''
#     azure_static_web_apps_api_token: $(AZURE_STATIC_WEB_APPS_API_TOKEN)
#   displayName: 'Deploy frontend'

# Optional: Update backend container app environment variables
- task: AzureCLI@2
  inputs:
    azureSubscription: 'MyAzureConnection'
    scriptType: 'ps'
    scriptLocation: 'inlineScript'
    inlineScript: |
      Write-Output "Updating backend environment variables..."
      $ResourceGroup = "placement-tracker-rg"
      $ContainerAppName = "internship-api"
      $envVars = @{
          AZURE_SQL_USER = "$(AZURE_SQL_USER)"
          AZURE_SQL_PASSWORD = "$(AZURE_SQL_PASSWORD)"
          AZURE_SQL_SERVER = "$(AZURE_SQL_SERVER)"
          AZURE_SQL_DATABASE = "$(AZURE_SQL_DATABASE)"
          OPENAI_API_KEY = "$(OPENAI_API_KEY)"
          AZURE_STORAGE_CONNECTION_STRING = "$(AZURE_STORAGE_CONNECTION_STRING)"
          AZURE_STORAGE_ACCOUNT = "$(AZURE_STORAGE_ACCOUNT)"
          AZURE_STORAGE_KEY = "$(AZURE_STORAGE_KEY)"
          AZURE_LANGUAGE_KEY = "$(AZURE_LANGUAGE_KEY)"
          AZURE_LANGUAGE_ENDPOINT = "$(AZURE_LANGUAGE_ENDPOINT)"
      }
      $envArgs = $envVars.GetEnumerator() | ForEach-Object { "$($_.Key)=$($_.Value)" }
      $envArgsString = $envArgs -join ","
      az containerapp update `
        --name $ContainerAppName `
        --resource-group $ResourceGroup `
        --set-env-vars $envArgsString
  displayName: 'Update backend env variables'

- powershell: |
    Write-Output "Pipeline run completed successfully!"
  displayName: 'Finish'