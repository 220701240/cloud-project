trigger:
- main   # Trigger pipeline on push to main branch

pool:
  name: Default   # your self-hosted agent pool
  demands: 
    - Agent.Name -equals SelfHostedAgent
    - Agent.OS -equals Windows_NT

variables:
- group: secrets   # Linked variable group name
# Normalize image naming to avoid tag mismatch during push
- name: ACR_LOGIN_SERVER
  value: $(ACR_NAME).azurecr.io
- name: IMAGE_NAME
  value: internship-api
- name: IMAGE_REPO
  value: $(ACR_LOGIN_SERVER)/$(IMAGE_NAME)
- name: IMAGE_TAG
  value: latest

steps:
# Step: Build and push Docker image (uses ACR service connection to prefix login server)
- task: Docker@2
  displayName: 'Build and push Docker image to ACR'
  inputs:
    command: buildAndPush
    containerRegistry: $(ACR_SERVICE_CONNECTION)
    repository: $(IMAGE_NAME)         # Do not include login server when using containerRegistry
    dockerfile: internship-api/Dockerfile
    buildContext: internship-api
    tags: |
      $(IMAGE_TAG)
      $(Build.BuildId)

# Step: Deploy new image to Azure Container Apps
- task: AzureCLI@2
  displayName: 'Update Container App image to $(Build.BuildId)'
  inputs:
    azureSubscription: 'MyAzureConnection'
    scriptType: 'ps'
    scriptLocation: 'inlineScript'
    inlineScript: |
      $ResourceGroup = "placement-tracker-rg"
      $ContainerAppName = "internship-api"
      $Image = "$(ACR_LOGIN_SERVER)/$(IMAGE_NAME):$(Build.BuildId)"

      Write-Output "Ensuring Container App can pull from ACR (if creds provided) ..."
      if ($env:ACR_USERNAME -and $env:ACR_PASSWORD) {
        az containerapp registry set `
          --name $ContainerAppName `
          --resource-group $ResourceGroup `
          --server $(ACR_LOGIN_SERVER) `
          --username $(ACR_USERNAME) `
          --password $(ACR_PASSWORD) | Out-Null
      } else {
        Write-Output "Skipping registry set: ACR_USERNAME/ACR_PASSWORD not provided (assuming already configured)."
      }

      Write-Output "Updating image to $Image ..."
      az containerapp update `
        --name $ContainerAppName `
        --resource-group $ResourceGroup `
        --image $Image |
        Out-Null

      Write-Output "Active revisions:"
      az containerapp revision list `
        --name $ContainerAppName `
        --resource-group $ResourceGroup `
        --query "[?properties.active==\`true\`].[name,properties.createdTime,properties.template.containers[0].image]" -o table

      $fqdn = az containerapp show --name $ContainerAppName --resource-group $ResourceGroup --query properties.configuration.ingress.fqdn -o tsv
      if ($fqdn) { Write-Output "Container App FQDN: https://$fqdn" }

# Optional: Deploy to Azure Web App for Containers
# - task: AzureWebAppContainer@1
#   inputs:
#     azureSubscription: 'MyAzureConnection'
#     appName: 'your-webapp-name'
#     imageName: '$(ACR_NAME)/internship-api:latest'
#   displayName: 'Deploy to Azure Web App'

# Optional: Deploy to Azure Container Instance
# - task: AzureCLI@2
#   inputs:
#     azureSubscription: 'MyAzureConnection'
#     scriptType: 'ps'
#     scriptLocation: 'inlineScript'
#     inlineScript: |
#       az container create --resource-group placement-tracker-rg --name internship-api-instance --image $(ACR_NAME)/internship-api:latest --registry-login-server $(ACR_NAME).azurecr.io --registry-username $(ACR_USERNAME) --registry-password $(ACR_PASSWORD)
#   displayName: 'Deploy to Azure Container Instance'
# ----------------------------
# Step 0: Debug environment variables
# ----------------------------
- powershell: |
    Write-Output "=== DEBUG: Available Variables ==="
    Get-ChildItem Env: | Sort-Object Name | ForEach-Object { Write-Output ("$($_.Name)=$($_.Value)") }
  displayName: 'Debug Environment Variables'
  

# ----------------------------
# Step 1: Checkout code
# ----------------------------
- checkout: self
  displayName: 'Checkout code'

# ----------------------------
# Step 2: Optional - Build frontend (React/Vue/Angular)
# ----------------------------
- task: NodeTool@0
  inputs:
    versionSpec: '16.x'
  displayName: 'Install Node.js'

- powershell: |
    Set-Location frontend
    Write-Output "Building frontend..."
    npm install
    # No build step needed for plain HTML/CSS/JS
    Write-Output "No build step required for static files."
  displayName: 'Prepare frontend (static HTML/CSS)'

# ----------------------------
# Security: OWASP ZAP baseline scan against local static server
# ----------------------------
- task: PowerShell@2
  displayName: 'Start local static server for frontend on :8000'
  inputs:
    targetType: 'inline'
    script: |
      Write-Output "Installing http-server..."
      npm install -g http-server
      Write-Output "Starting http-server on http://localhost:8000 serving ./frontend"
      # Use npx to ensure path resolution is reliable on the agent
      Start-Process -FilePath "npx.cmd" -ArgumentList "http-server frontend -p 8000" -WindowStyle Hidden
      Write-Output "Waiting for server to be ready..."
      $max=30
      for($i=0; $i -lt $max; $i++){
        try {
          $res = Invoke-WebRequest -Uri http://localhost:8000 -UseBasicParsing -TimeoutSec 2
          if ($res.StatusCode -ge 200) { Write-Output "Server ready"; break }
        } catch { Start-Sleep -Seconds 1 }
      }

- task: PowerShell@2
  displayName: 'Run OWASP ZAP baseline scan'
  inputs:
    targetType: 'inline'
    script: |
      # Prefer GHCR mirror to avoid Docker Hub rate limits; fall back to Docker Hub
      $image = "ghcr.io/zaproxy/zaproxy:stable"
      try {
        Write-Output "Pulling $image ..."
        docker pull $image | Out-Null
      } catch {
        Write-Warning "Failed to pull $image, falling back to docker.io/owasp/zap2docker-stable:latest"
        $image = "owasp/zap2docker-stable:latest"
        docker pull $image
      }

      $work = $env:SYSTEM_DEFAULTWORKINGDIRECTORY
      Write-Output "Running ZAP baseline from image $image against http://host.docker.internal:8000 ..."
      docker run --rm -v "${work}:/zap/wrk" $image zap-baseline.py -t http://host.docker.internal:8000 -r zap-report.html -I -m 5

- task: PublishBuildArtifacts@1
  displayName: 'Publish ZAP report artifact'
  inputs:
    PathtoPublish: '$(System.DefaultWorkingDirectory)/zap-report.html'
    ArtifactName: 'zap-report'
    publishLocation: 'Container'




# Example PowerShell step
- powershell: |
    # Convert hashtable to array of "key=value" strings
    $envVars = @{FOO='bar'; BAZ='qux'}
    $envArgs = $envVars.GetEnumerator() | ForEach-Object { "$($_.Key)=$($_.Value)" }
    Write-Output $envArgs
  displayName: 'Run PowerShell commands'

# ----------------------------
# Step 3: Deploy frontend to Azure Static Web App
# ----------------------------
# - task: AzureStaticWebApp@0
#   inputs:
#     app_location: 'frontend'                         # Frontend folder
#     api_location: ''                                 # Backend is separate
#     output_location: ''                              # Blank for static HTML
#     azure_static_web_apps_api_token: $(AZURE_STATIC_WEB_APPS_API_TOKEN)
#   displayName: 'Deploy frontend'

# ----------------------------
# Step 4: Update backend container environment variables
# ----------------------------
- task: AzureCLI@2
  inputs:
    azureSubscription: 'MyAzureConnection'    # Replace with your Azure service connection
    scriptType: 'ps'
    scriptLocation: 'inlineScript'
    inlineScript: |
      Write-Output "Updating backend environment variables..."

      $ResourceGroup = "placement-tracker-rg"
      $ContainerAppName = "internship-api"

      # Hashtable of environment variables
      $envVars = @{
          AZURE_SQL_USER = "$(AZURE_SQL_USER)"
          AZURE_SQL_PASSWORD = "$(AZURE_SQL_PASSWORD)"
          AZURE_SQL_SERVER = "$(AZURE_SQL_SERVER)"
          AZURE_SQL_DATABASE = "$(AZURE_SQL_DATABASE)"
          OPENAI_API_KEY = "$(OPENAI_API_KEY)"
          AZURE_STORAGE_CONNECTION_STRING = "$(AZURE_STORAGE_CONNECTION_STRING)"
          AZURE_STORAGE_ACCOUNT = "$(AZURE_STORAGE_ACCOUNT)"
          AZURE_STORAGE_KEY = "$(AZURE_STORAGE_KEY)"
          AZURE_LANGUAGE_KEY = "$(AZURE_LANGUAGE_KEY)"
          AZURE_LANGUAGE_ENDPOINT = "$(AZURE_LANGUAGE_ENDPOINT)"
          # Monitoring and CORS
          APPINSIGHTS_INSTRUMENTATIONKEY = "$(APPINSIGHTS_INSTRUMENTATIONKEY)"
          FRONTEND_ORIGIN = "$(FRONTEND_ORIGIN)"
          # Security
          JWT_SECRET = "$(JWT_SECRET)"
      }

      # Build array of space-separated key=value args
      $envArgs = $envVars.GetEnumerator() | ForEach-Object { "$($_.Key)=$($_.Value)" }

      # Update container app environment variables (pass each key=value as separate arg)
      az containerapp update `
        --name $ContainerAppName `
        --resource-group $ResourceGroup `
        --set-env-vars $envArgs

  displayName: 'Update backend env variables'

# ----------------------------
# Step 5: Finish
# ----------------------------
- powershell: |
    Write-Output "Pipeline run completed successfully!"
  displayName: 'Finish'